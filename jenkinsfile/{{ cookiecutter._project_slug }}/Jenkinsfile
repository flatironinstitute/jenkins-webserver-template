pipeline {
  agent none
  options {
    disableConcurrentBuilds()
    buildDiscarder(logRotator(numToKeepStr: '8', daysToKeepStr: '20'))
    timeout(time: 2, unit: 'HOURS')
  }
  stages {
    stage('docs') {
      agent {
        dockerfile {
          dir 'jenkins'
          args '--gpus 1'
        }
      }
      environment {
        HOME = pwd(tmp:false)
        OMP_NUM_THREADS = 4
        PROJECT_NAME = "{{ cookiecutter.built_site_name }}"
        GITHUB_PATH = "{{ cookiecutter.github_user }}/{{ cookiecutter.github_source_repo }}"
        GITHUB_TOKEN = credentials("{{ cookiecutter.credentials_name }}")
        BRANCH_NAME = "${env.BRANCH_NAME}"
        ISSUE_NUM = "${env.BRANCH_NAME.replace('PR-', '')}"
      }
      steps {
        sh 'python3.11 -m venv --system-site-packages $HOME'
        sh '''#!/bin/bash -ex
              source $HOME/bin/activate
              pip install -U pip
              {{ cookiecutter.install_step }}
              python3.11 -c "import torch; print(torch.cuda.current_device())"
              {{ cookiecutter.prebuild_step }}
              {{ cookiecutter.build_step }}
              {{ cookiecutter.postbuild_step }}
           '''
        lock('{{ cookiecutter.github_target_repo }}_publish') {
          script {
            def scm = scmGit(branches: [[name: 'refs/heads/main']], userRemoteConfigs: [[credentialsId: 'github-jenkins', url: 'https://github.com/{{ cookiecutter.github_user }}/{{ cookiecutter.github_target_repo }}.git']])
            dir(path: '{{ cookiecutter.push_target_dir }}') {
              checkout(changelog: false, poll: false, scm: scm)
              sh """#!/bin/bash -ex
                if [[ "\$BRANCH_NAME" =~ PR ]]; then
                   out_dir="pulls/\$ISSUE_NUM"
                elif [[ "${env.TAG_NAME}" != null ]]; then
                   out_dir="tags/${env.TAG_NAME}"
                else
                   out_dir="branch/\$BRANCH_NAME"
                fi
                echo \$GITHUB_PATH > {{ cookiecutter.push_target_dir }}/\$PROJECT_NAME/.gh_path
                DOCS_DIR={{ cookiecutter.push_target_dir }}/\$PROJECT_NAME/\$out_dir
                rm -rf \$DOCS_DIR
                mkdir -p \$DOCS_DIR
                cp -rp \$HOME/{{ cookiecutter.output_dir }}/* \$DOCS_DIR
                git add -A {{ cookiecutter.push_target_dir }}/\$PROJECT_NAME
                GIT_COMMITTER_EMAIL="jenkins@flatironinstitute.org" GIT_COMMITTER_NAME="Flatiron Jenkins" git commit --author='Flatiron Jenkins <jenkins@flatironinstitute.org>' --allow-empty -m "Generated documentation for \$DOCS_DIR" -m '${env.BUILD_TAG}'
              """
              gitPush(gitScm: scm, targetBranch: 'main', targetRepo: 'origin')
              // this being single quotes is VERY IMPORTANT. otherwise the
              // GITHUB_TOKEN value would be exposed, see
              // https://www.jenkins.io/doc/book/pipeline/jenkinsfile/#interpolation-of-sensitive-environment-variables
              sh '''#!/bin/bash -ex
                if [[ "$BRANCH_NAME" =~ PR ]]; then
                   DOCS_DIR={{ cookiecutter.push_target_dir }}/$PROJECT_NAME/pulls/$ISSUE_NUM

                   # figure out if we've already posted to the PR
                   comments=$(curl -L \
                       -H "Accept: application/vnd.github+json" \
                       -H "Authorization: Bearer $GITHUB_TOKEN" \
                       -H "X-GitHub-Api-Version: 2022-11-28" \
                       https://api.github.com/repos/$GITHUB_PATH/issues/$ISSUE_NUM/comments)

                   if [[ -z $(echo $comments | jq ".[].body" | grep "Documentation built by flatiron-jenkins") ]]; then
                       curl -L \
                         -X POST \
                         -H "Accept: application/vnd.github+json" \
                         -H "Authorization: Bearer $GITHUB_TOKEN" \
                         -H "X-GitHub-Api-Version: 2022-11-28" \
                         https://api.github.com/repos/$GITHUB_PATH/issues/$ISSUE_NUM/comments \
                         -d \'{"body":"Documentation built by flatiron-jenkins at {{ cookiecutter.site_url }}/{{ cookiecutter.site_baseurl }}\'$DOCS_DIR\'"}\'
                   fi
                fi
              '''
            }
          }
        }
      }
    }
  }
  post {
    failure {
      emailext subject: '$GITHUB_PATH - Build #$BUILD_NUMBER - $BUILD_STATUS',
        body: '''$GITHUB_PATH - Build #$BUILD_NUMBER - $BUILD_STATUS

Check console output at $BUILD_URL to view full results.

Building $BRANCH_NAME for $CAUSE
$JOB_DESCRIPTION

Chages:
$CHANGES

End of build log:
${BUILD_LOG,maxLines=200}
''',
	      recipientProviders: [
		    [$class: 'DevelopersRecipientProvider'],
	    ],
	      replyTo: '$DEFAULT_REPLYTO'
    }
  }
}
